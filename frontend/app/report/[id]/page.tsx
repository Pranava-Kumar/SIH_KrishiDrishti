// frontend/app/report/[id]/page.tsx

'use client'; // This marks the component as a Client Component

import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation'; // Use next/navigation for App Router
import { fetchAnalysisResult } from '@/lib/api'; // Import your API client function
import { ResultCard } from '@/components/analysis/ResultCard'; // Import a reusable component
import { Button } from '@/components/ui/button';
import { DownloadIcon } from 'lucide-react';

// Define the type for the result data based on your backend schema
type AnalysisResult = {
  upload_id: string;
  prediction: string;
  confidence: number;
  recommendation: string;
  timestamp: string; // ISO string
};

export default function ReportPage() {
  const { id } = useParams<{ id: string }>(); // Get the upload ID from the URL
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadResult = async () => {
      try {
        setLoading(true);
        setError(null);
        // Call your API function to get the result
        const data = await fetchAnalysisResult(id);
        setResult(data);
      } catch (err) {
        console.error("Error fetching analysis result:", err);
        setError(`Failed to load analysis for ID: ${id}`);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      loadResult();
    }
  }, [id]); // Re-run if the ID changes

  // Function to generate and download report
  const handleDownloadReport = () => {
    if (result) {
      const reportContent = `
KrishiDrishti - Crop Health Analysis Report
==========================================

Upload ID: ${result.upload_id}
Analysis Date: ${new Date(result.timestamp).toLocaleString()}
Condition: ${result.prediction}
Confidence Level: ${(result.confidence * 100).toFixed(2)}%
Recommendation: ${result.recommendation}

This report was generated by our AI-powered system for crop health monitoring.
      `;
      
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `krishi_drishti_report_${result.upload_id}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Generating your report...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-red-600">Error</h2>
          <p className="text-gray-600">{error}</p>
          <a href="/upload" className="mt-4 inline-block px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Upload Another Image
          </a>
        </div>
      </div>
    );
  }

  if (!result) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-800">No Report Found</h2>
          <p className="text-gray-600">The analysis for ID {id} could not be found.</p>
          <a href="/upload" className="mt-4 inline-block px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Upload an Image
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Detailed Report</h1>
      <div className="bg-white rounded-lg shadow-md p-6">
        <ResultCard result={result} />
        
        <div className="mt-8">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Detailed Analysis</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="border rounded-lg p-4">
              <h3 className="font-medium text-gray-700 mb-2">Crop Condition</h3>
              <p className="text-gray-600">{result.prediction}</p>
            </div>
            <div className="border rounded-lg p-4">
              <h3 className="font-medium text-gray-700 mb-2">Confidence Level</h3>
              <p className="text-gray-600">{(result.confidence * 100).toFixed(2)}%</p>
            </div>
            <div className="border rounded-lg p-4 md:col-span-2">
              <h3 className="font-medium text-gray-700 mb-2">Recommendations</h3>
              <p className="text-gray-600">{result.recommendation}</p>
            </div>
          </div>
        </div>
        
        <div className="mt-8 flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0">
          <Button onClick={handleDownloadReport} className="flex items-center justify-center">
            <DownloadIcon className="mr-2 h-4 w-4" />
            Download Report
          </Button>
          <a
            href={`/analysis/${result.upload_id}`} // Link back to analysis
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 text-center flex items-center justify-center"
          >
            Back to Analysis
          </a>
          <a
            href="/upload" // Link back to upload
            className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 text-center flex items-center justify-center"
          >
            Analyze Another
          </a>
        </div>
      </div>
    </div>
  );
}